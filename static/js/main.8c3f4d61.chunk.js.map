{"version":3,"sources":["TodoContext/index.js","TodoContext/useLocalStorage.js","TodoCounter/index.js","TodoSearch/index.js","TodoList/index.js","CreateTodoButton/index.js","TodoItem/index.js","Modal/index.js","TodoForm/index.js","App/appUI.js","App/index.js","index.js"],"names":["TodoContext","React","createContext","TodoProvider","props","itemName","initialValue","useState","loading","setLoading","error","setError","item","setItem","useEffect","setTimeout","parsedItem","localStorageItem","localStorage","getItem","JSON","parse","stringify","saveItem","newItem","stringifiedItem","useLocalStorage","todos","saveTodos","searchValue","setSearchValue","openModal","setOpenModal","completedTodos","filter","todo","completed","length","totalTodos","searchedTodos","todoText","text","toLocaleLowerCase","searchText","includes","Provider","value","completeTodo","newTodos","todoIndex","findIndex","deleteTodo","splice","addTodo","push","children","TodoCounter","useContext","className","TodoSearch","placeholder","onChange","event","console","log","target","TodoList","CreateTodoButton","onClick","prevState","TodoItem","onComplete","onDelete","Modal","ReactDOM","createPortal","document","getElementById","TodoForm","newTodoValue","setNewTodoValue","onSubmit","preventDefault","type","AppUI","Fragment","map","App","render"],"mappings":"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","file":"static/js/main.8c3f4d61.chunk.js","sourcesContent":["import React from \"react\";\nimport { useLocalStorage } from \"./useLocalStorage\";\n\n    //MANEJO DEL ESTADO----------------\n    //cuando llamemos a la funcion setState re Renderizamos nuestro componente con el nuevo estado\n    //con setSearchValue actualizamos el valor del estado\n    //EL ESTADO NOS DEVUELVE UN ARRAY [state,setState]\n    //los componentes comienzan con MAYUSCULA\n\nconst TodoContext = React.createContext(); //Crear contexto\n\nfunction TodoProvider(props){\n    const {\n        item:todos,\n        saveItem:saveTodos,\n        loading,\n        error,\n    } = useLocalStorage('TODOS_V1',[]);\n\n    const [searchValue,setSearchValue] = React.useState('');\n\n    const [openModal, setOpenModal] = React.useState(false);\n    \n    //contando TODOs totales y TODOs completed \n    const completedTodos = todos.filter(todo => !!todo.completed).length;     //utilizamos ! para verificar que la variable es falsa y doble !! es para verificar si es verdadera\n    const totalTodos = todos.length;   //cuales todos tienen la propiedad completed como true\n    let searchedTodos =[];//Creando el array que contendra los Todos buscados\n\n    //en caso de que searchValue.length(cantidad de letras escritas) NO sea mayor o igual a 1\n    if(!searchValue.length >=1){\n        searchedTodos = todos;\n    } else {\n        searchedTodos = todos.filter(todo =>{\n            const todoText = todo.text.toLocaleLowerCase();// volvemos el valor de texto de todo a minuscula y lo guardamos\n            const searchText = searchValue.toLocaleLowerCase();//volvemos el valor buscado que esta en searchValue en minuscula y lo guardamos\n            return todoText.includes(searchText);// retornar falso o verdadero si searchText(letras buscadas) esta includo en el texto del todo\n    });\n    }\n    \n    //complete TODOs\n    const completeTodo = (text) =>{\n        const newTodos = [...todos] //creamos un clon de la lista TODOs\n        const todoIndex = todos.findIndex(todo => todo.text ===text); //buscamos el index del TODOs que se quiere completar\n        if(newTodos[todoIndex].completed ===true){\n        newTodos[todoIndex].completed = false; //cambiamos su propiedad completed\n        saveTodos(newTodos)//llamamos a la funcion que va a guardar la informacion en localStorage y hacer el cambio en el estado\n        }else{  \n        newTodos[todoIndex].completed = true;\n        saveTodos(newTodos) //llamamos a la funcion que va a guardar la informacion en localStorage y hacer el cambio en el estado\n        }\n    }\n    \n    //elimiando TODOs\n    const deleteTodo =(text) =>{\n        const newTodos = [...todos]//creamos un clon de la lista TODOs\n        const todoIndex = todos.findIndex(todo => todo.text ===text);\n        newTodos.splice(todoIndex,1);//eliminamos TODOs que este recibiendo el evento\n        saveTodos(newTodos) //llamamos a la funcion que va a guardar la informacion en localStorage y hacer el cambio en el estado\n    }\n\n    //AÃ±adiendo TODOs\n    const addTodo =(text) =>{\n        const newTodos = [...todos]//creamos un clon de la lista TODOs\n        newTodos.push({\n            completed: false,\n            text,\n        });\n        saveTodos(newTodos) //llamamos a la funcion que va a guardar la informacion en localStorage y hacer el cambio en el estado\n    }\n\n    return(\n        // propiedades que queramos compartir con nuestro contexto tiene que estar en value\n        <TodoContext.Provider value={{\n            loading,\n            error,\n            totalTodos,\n            completedTodos,\n            searchValue,\n            setSearchValue,\n            searchedTodos,\n            completeTodo,\n            deleteTodo,\n            addTodo,\n            openModal,\n            setOpenModal,\n        }}>\n            {props.children}\n        </TodoContext.Provider>\n    );\n}\n\nexport {TodoContext,TodoProvider};","import React from \"react\";\n\n//CUSTOM REACT HOOKE, LOCAL STORAGE Y MANEJO DEL ESTADO\nfunction useLocalStorage(itemName, initialValue){ //Creando un custom react hook, comienza con use\n\n    //SIMULANDO UNA API\n    const [loading,setLoading] = React.useState(true);\n    const [error,setError] = React.useState(false);\n     //llamando al estado\n    const [item,setItem] = React.useState(initialValue);//agregando estado al componente -setTodos funcion para cambiar estado\n\n    React.useEffect(() =>{\n        setTimeout(() =>{\n            try{\n                const localStorageItem = localStorage.getItem(itemName); //default 'itemName'\n                let parsedItem; //parsedTodos sera enviado a estado de los todos de react\n\n        if(!localStorageItem){ //verificamos si los usuarios son nuevos(que no haya informacion en localStorage)-si localStorageTodos es null, 0, und, etc\n            localStorage.setItem(itemName,JSON.stringify(initialValue));//le tenemos que enviar un string, por que lo convertimos al array vacion con JSON.stringify-    //local storage solo acepta strings\n            parsedItem = initialValue;\n        }else {\n            parsedItem = JSON.parse(localStorageItem);\n        }\n\n        setItem(parsedItem);\n        setLoading(false);\n        } catch(error){\n            setError(error);\n        }\n      },1000); //esperar x tiempo para ejecutar codigo\n    });\n    //FUNCION PUENTE DE COMPLETE Y DELETE TODOS HACIA EL LOCAL STORAGE Y EL ESTADO\n    const saveItem = (newItem) =>{\n        try{\n            const stringifiedItem = JSON.stringify(newItem);   //convertir los TODOs en strings\n            localStorage.setItem(itemName,stringifiedItem);\n            setItem(newItem);\n        }catch(error){\n            setError(error);\n        }\n    };\n\n    return { //por convencion si tenemos mas de 2 estados para enviar es mejor enviar un objetos\n        item,\n        saveItem,\n        loading,\n        error,\n    };\n}\n\nexport {useLocalStorage};","import React from \"react\";\nimport { TodoContext } from \"../TodoContext\";\nimport './TodoCounter.css';\n\nfunction TodoCounter(){\n    const {totalTodos,completedTodos} = React.useContext(TodoContext);\n    return(\n        <h2 className=\"TodoCounter\">Has completado {completedTodos} de {totalTodos} TODOs</h2>\n    );\n}\n\nexport {TodoCounter};","import React from \"react\";\nimport { TodoContext } from \"../TodoContext\";\nimport './TodoSearch.css';\n\n\n//Actualizar estado por medio de props\n//el componente que llame al componente TodoSEarch debe enviar 2 props ({searchValue,setSearchValue})\nfunction TodoSearch (){\n    const {searchValue,setSearchValue} = React.useContext(TodoContext);\n\n    //cada vez que el usuario realice un cambio llamamos a la funcion setSearchValue\n    const onSearchValueChange = (event) => {\n        console.log(event.target.value);\n        setSearchValue(event.target.value);\n    }\n    return (\n        <input \n        className=\"TodoSearch\" \n        placeholder=\"Filtra tus TODOs\"\n        //conectando el compoente con el valor del estado\n        value={searchValue}\n        //al realizar un cambio ejecutar la funcion onSearchValueChange\n        onChange={onSearchValueChange}\n        />\n    );\n}\n\nexport {TodoSearch};","import React from \"react\";\nimport \"./TodoList.css\";\n\nfunction TodoList (props){\n    return (\n        <section>\n            <ul className=\"TodoList\">\n                {props.children}\n            </ul>\n        </section>\n    );\n}\n\nexport {TodoList};","import React from \"react\";\nimport \"./CreateTodoButton.css\";\n\nfunction CreateTodoButton(props){\n    const onClickButton = () => {\n        props.setOpenModal(prevState => !prevState); //devolviendo la negacion del estado anterior\n    };\n    return(\n        <button \n        className=\"CreateTodoButton\"\n        onClick={onClickButton} //tenemos que envolver una funcion lo que esperamos que se ejecute cuando ocurra el evento\n        >\n            +\n        </button>\n    );\n}\n\nexport {CreateTodoButton};","import React from \"react\";\nimport  \"./TodoItem.css\";\n\nfunction TodoItem (props){\n    return (\n        <li className=\"TodoItem\">\n            <span className={`Icon Icon-check ${props.completed && 'Icon-check-active'}`}\n            onClick={props.onComplete}\n            >\n                á¼\n            </span>\n            <p className={`TodoItem-p ${props.completed && 'TodoItem-p-completed'}`}>\n                {props.text}\n            </p>\n            <span className=\"Icon Icon-delete\"\n            onClick = {props.onDelete}\n            >\n                X\n            </span>\n        </li>\n    );\n}\n\nexport {TodoItem};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Modal.css';\n\nfunction Modal({children}){\n    return ReactDOM.createPortal(\n        <div className=\"ModalBackground\">\n            {children}\n        </div>,\n        document.getElementById('modal'),\n    );\n}\n\nexport {Modal};","import React from \"react\";\nimport { TodoContext } from \"../TodoContext\";\nimport \"./TodoForm.css\";\n\nfunction TodoForm(){\n\n    const [newTodoValue,setNewTodoValue] = React.useState(\"\");\n\n    const { //consumir el contexto\n        addTodo,\n        setOpenModal,\n    } = React.useContext(TodoContext);\n\n    const onChange = (event) =>{\n        setNewTodoValue (event.target.value);\n    };\n\n    const onCancel = () =>{\n        setOpenModal(false);\n    };\n    const onSubmit = (event) =>{\n        event.preventDefault();\n        addTodo(newTodoValue);\n        setOpenModal(false);\n    };\n\n\n    return(\n        <form className=\"TodoForm\" onSubmit={onSubmit}>\n            <label className=\"TodoFormLabel\">Agrega un nuevo TODO</label>\n            <textarea\n                className=\"TodoFormTextarea\"\n                value={newTodoValue}\n                onChange={onChange}\n                placeholder=\"Escribe el TODO que quieras agregar\"\n            />\n            <div className=\"TodoFormButtonContainer\">\n                <button\n                    className=\"TodoButtonCancel\"\n                    type=\"button\"\n                    onClick={onCancel}\n                >\n                    Cancelar\n                </button>\n                <button\n                    className=\"TodoButtonAdd\"\n                    type=\"submit\"\n                >\n                    AÃ±adir\n                </button>\n            </div>\n        </form>\n    );\n}\n\nexport{TodoForm};","import React from \"react\";\nimport { TodoCounter } from \"../TodoCounter/\";\nimport { TodoContext } from \"../TodoContext\";\nimport { TodoSearch } from \"../TodoSearch\";\nimport { TodoList } from \"../TodoList\";\nimport { CreateTodoButton } from \"../CreateTodoButton\";\nimport { TodoItem } from \"../TodoItem\";\nimport{ Modal } from \"../Modal\";\nimport {TodoForm} from \"../TodoForm\";\n\nfunction AppUI({\n}){\n    const {\n        error,\n        loading,\n        searchedTodos,\n        completeTodo,\n        deleteTodo,\n        openModal,\n        setOpenModal,\n    } = React.useContext (TodoContext)\n\n    return(\n        // React.Fragment es una etiqueta invisible que contiene nuestros componentes\n    //solo se puede enviar una etiqueta por componente\n    <React.Fragment> \n        <TodoCounter/>\n\n        <TodoSearch/>\n\n        <TodoList>\n            {/* useeffect - Estados de carga */ }\n            {error && <p>Hubo un error</p> }\n            {loading && <p>Estamos cargando </p> }\n            {/* si no esta cargando Y searchedTodos no tiene informacion ENTONCES(&&) crea tu primer todo */}\n            {(!loading && !searchedTodos.length) && <p>Crea tu primer TODOs</p>} \n\n            {/* recorremos el array que ya fue filtrado de TODOs */}\n            {searchedTodos.map(todo =>(\n                <TodoItem\n                key={todo.text} \n                text={todo.text} \n                completed={todo.completed}\n                onComplete ={() => completeTodo(todo.text)}\n                onDelete ={() => deleteTodo(todo.text)}\n            />\n            ))}\n        </TodoList>\n\n        {!!openModal && (\n            <Modal>\n                <TodoForm/>\n            </Modal>\n        )}\n\n        <CreateTodoButton \n            setOpenModal ={setOpenModal}\n        />\n    \n    </React.Fragment>\n    );\n}\n\nexport{AppUI}","import React from \"react\";\nimport { AppUI } from \"./appUI\";  \nimport {TodoProvider} from \"../TodoContext\";\n\n\n\nfunction App() {\n  \n  return (\n    <TodoProvider>\n      <AppUI/>\n    </TodoProvider>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/index.js';\n\n\nReactDOM.render( //renderizando el componente app\n    <App />,\n    document.getElementById(\"root\")\n);\n\n"],"sourceRoot":""}